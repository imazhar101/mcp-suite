{
  "tag_name": "v1.0.0",
  "target_commitish": "main",
  "name": "MCP Suite v1.0.0 - Initial Release 🚀",
  "body": "# MCP Suite v1.0.0 - Initial Release 🚀\n\n**Release Date:** June 19, 2025\n\n## 🎉 Major Features\n\nThis is the initial major release of MCP Suite, a comprehensive monorepo of Model Context Protocol (MCP) servers designed for standardized development and deployment.\n\n### 🆕 New MCP Servers\n\n#### 🎫 **Jira Server** - Issue Management & Project Tracking\n- Complete Jira integration for issue management and workflow automation\n- **11 tools** including JQL search, issue CRUD operations, workflow transitions\n- Support for comments, assignments, and project management\n\n#### ☁️ **Salesforce Server** - CRM Integration with OAuth\n- Full Salesforce CRM integration using REST APIs\n- OAuth username-password flow authentication with automatic token management\n- **7 tools** for SOQL queries, record CRUD operations, and metadata inspection\n- Dynamic authentication status checking and token renewal\n\n#### 🐘 **PostgreSQL Server** - Database Management & Analytics\n- PostgreSQL database management with safety controls\n- `POSTGRESQL_ALLOW_DANGEROUS_OPERATIONS` environment variable for write operation control\n- Read-only mode by default with optional write operations\n- **2 tools** for query execution and safety mode checking\n\n#### 🎓 **Canvas LMS Server** - Learning Management System\n- Comprehensive Canvas LMS integration\n- **185 tools** covering course management, enrollment, grading, and administration\n- Support for assignments, quizzes, modules, pages, and user management\n- Advanced features like grade change auditing and external tool integration\n\n#### 🎨 **Figma Server** - Design File & Workflow Management\n- Complete Figma API integration for design workflows\n- **16 tools** for file operations, comment management, and component retrieval\n- Team & project management capabilities\n- Components & styles retrieval with comprehensive API coverage\n\n### 🏗️ **Architecture & Infrastructure**\n\n#### Centralized Build System\n- Refactored build system with centralized dist files under `dist/servers/`\n- Removed individual server dist folders for better maintainability\n- Shared TypeScript compilation with optimized dependencies\n- Standardized package.json configurations across all servers\n\n#### Shared Utilities & Middleware\n- Common TypeScript interfaces and types\n- Reusable utility functions (logger, config, validation)\n- Standardized middleware for authentication and error handling\n- Consistent error responses and structured logging\n\n### 📖 **Documentation & Setup**\n\n#### Comprehensive Documentation\n- Added detailed MCP Setup Guide for AI coding assistants (Continue.dev, Claude Code, Cline)\n- Collapsible sections in README for better organization\n- Individual server documentation with tool listings and configuration guides\n- Environment variable setup instructions for each server\n\n#### Developer Experience\n- Streamlined server startup instructions\n- Enhanced build and deployment scripts\n- Improved testing infrastructure with Vitest integration\n- Better configuration management with environment-specific configs\n\n## 🛠️ **Technical Improvements**\n\n### Authentication & Security\n- Enhanced OAuth authentication flows with token persistence\n- Improved environment variable management\n- Safety controls for database operations\n- Secure credential handling across all servers\n\n### Performance & Reliability\n- Optimized TypeScript compilation\n- Better error handling and logging\n- Standardized server architecture patterns\n- Health check endpoints for monitoring\n\n### Testing & Quality\n- Integration test suite using Vitest\n- Automatic test skipping when environment variables are not configured\n- Comprehensive type checking with TypeScript\n- Linting and code quality tools\n\n## 📦 **Package Information**\n\n- **Total Servers:** 5 (Jira, Salesforce, PostgreSQL, Canvas, Figma)\n- **Total Tools:** 220+ across all servers\n- **Architecture:** Monorepo with shared utilities\n- **Language:** TypeScript with comprehensive type definitions\n- **Testing:** Vitest integration test suite\n- **Documentation:** Complete setup guides and API documentation\n\n## 🚀 **Getting Started**\n\n1. **Clone and install:**\n   ```bash\n   git clone https://github.com/imazhar101/mcp-suite.git\n   cd mcp-suite\n   npm install\n   ```\n\n2. **Build all servers:**\n   ```bash\n   npm run build\n   ```\n\n3. **Configure your desired server:**\n   - See individual server README files for environment variable setup\n   - Check the [MCP Setup Guide](docs/MCP_SETUP_GUIDE.md) for AI assistant integration\n\n4. **Run a server:**\n   ```bash\n   node dist/servers/jira/index.js  # Example for Jira server\n   ```\n\n## 🔗 **Links**\n\n- **Repository:** https://github.com/imazhar101/mcp-suite\n- **Documentation:** [MCP Setup Guide](docs/MCP_SETUP_GUIDE.md)\n- **Issues:** https://github.com/imazhar101/mcp-suite/issues\n- **Changelog:** [CHANGELOG.md](CHANGELOG.md)\n\n## 🤝 **Contributing**\n\nWe welcome contributions! Please see our contributing guidelines and feel free to submit issues or pull requests.\n\n## 📝 **License**\n\nMIT License - see the LICENSE file for details.\n\n---\n\n**Full Changelog:** https://github.com/imazhar101/mcp-suite/commits/v1.0.0",
  "draft": false,
  "prerelease": false,
  "generate_release_notes": true
}